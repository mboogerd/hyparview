// This file is generated by rust-protobuf 2.0.4. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct Peer {
    // message fields
    addrs: ::protobuf::RepeatedField<::std::vec::Vec<u8>>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl Peer {
    pub fn new() -> Peer {
        ::std::default::Default::default()
    }

    // repeated bytes addrs = 1;

    pub fn clear_addrs(&mut self) {
        self.addrs.clear();
    }

    // Param is passed by value, moved
    pub fn set_addrs(&mut self, v: ::protobuf::RepeatedField<::std::vec::Vec<u8>>) {
        self.addrs = v;
    }

    // Mutable pointer to the field.
    pub fn mut_addrs(&mut self) -> &mut ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        &mut self.addrs
    }

    // Take field
    pub fn take_addrs(&mut self) -> ::protobuf::RepeatedField<::std::vec::Vec<u8>> {
        ::std::mem::replace(&mut self.addrs, ::protobuf::RepeatedField::new())
    }

    pub fn get_addrs(&self) -> &[::std::vec::Vec<u8>] {
        &self.addrs
    }
}

impl ::protobuf::Message for Peer {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_bytes_into(wire_type, is, &mut self.addrs)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.addrs {
            my_size += ::protobuf::rt::bytes_size(1, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        for v in &self.addrs {
            os.write_bytes(1, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Peer {
        Peer::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "addrs",
                    |m: &Peer| { &m.addrs },
                    |m: &mut Peer| { &mut m.addrs },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Peer>(
                    "Peer",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Peer {
        static mut instance: ::protobuf::lazy::Lazy<Peer> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Peer,
        };
        unsafe {
            instance.get(Peer::new)
        }
    }
}

impl ::protobuf::Clear for Peer {
    fn clear(&mut self) {
        self.clear_addrs();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Peer {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Peer {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct HpvMessage {
    // message fields
    field_type: ::std::option::Option<MessageType>,
    origin: ::protobuf::SingularPtrField<Peer>,
    forwarder: ::protobuf::SingularPtrField<Peer>,
    ttl: ::std::option::Option<i32>,
    priority: ::std::option::Option<bool>,
    accepted: ::std::option::Option<bool>,
    shuffle_id: ::std::option::Option<i32>,
    exchange: ::protobuf::RepeatedField<Peer>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl HpvMessage {
    pub fn new() -> HpvMessage {
        ::std::default::Default::default()
    }

    // required .hpv.pb.MessageType type = 1;

    pub fn clear_field_type(&mut self) {
        self.field_type = ::std::option::Option::None;
    }

    pub fn has_field_type(&self) -> bool {
        self.field_type.is_some()
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: MessageType) {
        self.field_type = ::std::option::Option::Some(v);
    }

    pub fn get_field_type(&self) -> MessageType {
        self.field_type.unwrap_or(MessageType::DISCONNECT)
    }

    // optional .hpv.pb.Peer origin = 2;

    pub fn clear_origin(&mut self) {
        self.origin.clear();
    }

    pub fn has_origin(&self) -> bool {
        self.origin.is_some()
    }

    // Param is passed by value, moved
    pub fn set_origin(&mut self, v: Peer) {
        self.origin = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_origin(&mut self) -> &mut Peer {
        if self.origin.is_none() {
            self.origin.set_default();
        }
        self.origin.as_mut().unwrap()
    }

    // Take field
    pub fn take_origin(&mut self) -> Peer {
        self.origin.take().unwrap_or_else(|| Peer::new())
    }

    pub fn get_origin(&self) -> &Peer {
        self.origin.as_ref().unwrap_or_else(|| Peer::default_instance())
    }

    // optional .hpv.pb.Peer forwarder = 3;

    pub fn clear_forwarder(&mut self) {
        self.forwarder.clear();
    }

    pub fn has_forwarder(&self) -> bool {
        self.forwarder.is_some()
    }

    // Param is passed by value, moved
    pub fn set_forwarder(&mut self, v: Peer) {
        self.forwarder = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_forwarder(&mut self) -> &mut Peer {
        if self.forwarder.is_none() {
            self.forwarder.set_default();
        }
        self.forwarder.as_mut().unwrap()
    }

    // Take field
    pub fn take_forwarder(&mut self) -> Peer {
        self.forwarder.take().unwrap_or_else(|| Peer::new())
    }

    pub fn get_forwarder(&self) -> &Peer {
        self.forwarder.as_ref().unwrap_or_else(|| Peer::default_instance())
    }

    // optional int32 ttl = 4;

    pub fn clear_ttl(&mut self) {
        self.ttl = ::std::option::Option::None;
    }

    pub fn has_ttl(&self) -> bool {
        self.ttl.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ttl(&mut self, v: i32) {
        self.ttl = ::std::option::Option::Some(v);
    }

    pub fn get_ttl(&self) -> i32 {
        self.ttl.unwrap_or(0)
    }

    // optional bool priority = 5;

    pub fn clear_priority(&mut self) {
        self.priority = ::std::option::Option::None;
    }

    pub fn has_priority(&self) -> bool {
        self.priority.is_some()
    }

    // Param is passed by value, moved
    pub fn set_priority(&mut self, v: bool) {
        self.priority = ::std::option::Option::Some(v);
    }

    pub fn get_priority(&self) -> bool {
        self.priority.unwrap_or(false)
    }

    // optional bool accepted = 6;

    pub fn clear_accepted(&mut self) {
        self.accepted = ::std::option::Option::None;
    }

    pub fn has_accepted(&self) -> bool {
        self.accepted.is_some()
    }

    // Param is passed by value, moved
    pub fn set_accepted(&mut self, v: bool) {
        self.accepted = ::std::option::Option::Some(v);
    }

    pub fn get_accepted(&self) -> bool {
        self.accepted.unwrap_or(false)
    }

    // optional int32 shuffle_id = 10;

    pub fn clear_shuffle_id(&mut self) {
        self.shuffle_id = ::std::option::Option::None;
    }

    pub fn has_shuffle_id(&self) -> bool {
        self.shuffle_id.is_some()
    }

    // Param is passed by value, moved
    pub fn set_shuffle_id(&mut self, v: i32) {
        self.shuffle_id = ::std::option::Option::Some(v);
    }

    pub fn get_shuffle_id(&self) -> i32 {
        self.shuffle_id.unwrap_or(0)
    }

    // repeated .hpv.pb.Peer exchange = 11;

    pub fn clear_exchange(&mut self) {
        self.exchange.clear();
    }

    // Param is passed by value, moved
    pub fn set_exchange(&mut self, v: ::protobuf::RepeatedField<Peer>) {
        self.exchange = v;
    }

    // Mutable pointer to the field.
    pub fn mut_exchange(&mut self) -> &mut ::protobuf::RepeatedField<Peer> {
        &mut self.exchange
    }

    // Take field
    pub fn take_exchange(&mut self) -> ::protobuf::RepeatedField<Peer> {
        ::std::mem::replace(&mut self.exchange, ::protobuf::RepeatedField::new())
    }

    pub fn get_exchange(&self) -> &[Peer] {
        &self.exchange
    }
}

impl ::protobuf::Message for HpvMessage {
    fn is_initialized(&self) -> bool {
        if self.field_type.is_none() {
            return false;
        }
        for v in &self.origin {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.forwarder {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.exchange {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto2_enum_with_unknown_fields_into(wire_type, is, &mut self.field_type, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.origin)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.forwarder)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.ttl = ::std::option::Option::Some(tmp);
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.priority = ::std::option::Option::Some(tmp);
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.accepted = ::std::option::Option::Some(tmp);
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.shuffle_id = ::std::option::Option::Some(tmp);
                },
                11 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.exchange)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(v) = self.field_type {
            my_size += ::protobuf::rt::enum_size(1, v);
        }
        if let Some(ref v) = self.origin.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.forwarder.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(v) = self.ttl {
            my_size += ::protobuf::rt::value_size(4, v, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(v) = self.priority {
            my_size += 2;
        }
        if let Some(v) = self.accepted {
            my_size += 2;
        }
        if let Some(v) = self.shuffle_id {
            my_size += ::protobuf::rt::value_size(10, v, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.exchange {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let Some(v) = self.field_type {
            os.write_enum(1, v.value())?;
        }
        if let Some(ref v) = self.origin.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.forwarder.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(v) = self.ttl {
            os.write_int32(4, v)?;
        }
        if let Some(v) = self.priority {
            os.write_bool(5, v)?;
        }
        if let Some(v) = self.accepted {
            os.write_bool(6, v)?;
        }
        if let Some(v) = self.shuffle_id {
            os.write_int32(10, v)?;
        }
        for v in &self.exchange {
            os.write_tag(11, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> HpvMessage {
        HpvMessage::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeEnum<MessageType>>(
                    "type",
                    |m: &HpvMessage| { &m.field_type },
                    |m: &mut HpvMessage| { &mut m.field_type },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Peer>>(
                    "origin",
                    |m: &HpvMessage| { &m.origin },
                    |m: &mut HpvMessage| { &mut m.origin },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Peer>>(
                    "forwarder",
                    |m: &HpvMessage| { &m.forwarder },
                    |m: &mut HpvMessage| { &mut m.forwarder },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "ttl",
                    |m: &HpvMessage| { &m.ttl },
                    |m: &mut HpvMessage| { &mut m.ttl },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "priority",
                    |m: &HpvMessage| { &m.priority },
                    |m: &mut HpvMessage| { &mut m.priority },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "accepted",
                    |m: &HpvMessage| { &m.accepted },
                    |m: &mut HpvMessage| { &mut m.accepted },
                ));
                fields.push(::protobuf::reflect::accessor::make_option_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "shuffle_id",
                    |m: &HpvMessage| { &m.shuffle_id },
                    |m: &mut HpvMessage| { &mut m.shuffle_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Peer>>(
                    "exchange",
                    |m: &HpvMessage| { &m.exchange },
                    |m: &mut HpvMessage| { &mut m.exchange },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<HpvMessage>(
                    "HpvMessage",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static HpvMessage {
        static mut instance: ::protobuf::lazy::Lazy<HpvMessage> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const HpvMessage,
        };
        unsafe {
            instance.get(HpvMessage::new)
        }
    }
}

impl ::protobuf::Clear for HpvMessage {
    fn clear(&mut self) {
        self.clear_field_type();
        self.clear_origin();
        self.clear_forwarder();
        self.clear_ttl();
        self.clear_priority();
        self.clear_accepted();
        self.clear_shuffle_id();
        self.clear_exchange();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for HpvMessage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HpvMessage {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum MessageType {
    DISCONNECT = 0,
    JOIN = 1,
    FORWARD_JOIN = 2,
    NEIGHBOUR = 3,
    NEIGHBOUR_REPLY = 4,
    SHUFFLE = 5,
    SHUFFLE_REPLY = 6,
}

impl ::protobuf::ProtobufEnum for MessageType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<MessageType> {
        match value {
            0 => ::std::option::Option::Some(MessageType::DISCONNECT),
            1 => ::std::option::Option::Some(MessageType::JOIN),
            2 => ::std::option::Option::Some(MessageType::FORWARD_JOIN),
            3 => ::std::option::Option::Some(MessageType::NEIGHBOUR),
            4 => ::std::option::Option::Some(MessageType::NEIGHBOUR_REPLY),
            5 => ::std::option::Option::Some(MessageType::SHUFFLE),
            6 => ::std::option::Option::Some(MessageType::SHUFFLE_REPLY),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [MessageType] = &[
            MessageType::DISCONNECT,
            MessageType::JOIN,
            MessageType::FORWARD_JOIN,
            MessageType::NEIGHBOUR,
            MessageType::NEIGHBOUR_REPLY,
            MessageType::SHUFFLE,
            MessageType::SHUFFLE_REPLY,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("MessageType", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for MessageType {
}

impl ::protobuf::reflect::ProtobufValue for MessageType {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\thpv.proto\x12\x06hpv.pb\"\x1c\n\x04Peer\x12\x14\n\x05addrs\x18\x01\
    \x20\x03(\x0cR\x05addrs\"\x9a\x02\n\nHpvMessage\x12'\n\x04type\x18\x01\
    \x20\x02(\x0e2\x13.hpv.pb.MessageTypeR\x04type\x12$\n\x06origin\x18\x02\
    \x20\x01(\x0b2\x0c.hpv.pb.PeerR\x06origin\x12*\n\tforwarder\x18\x03\x20\
    \x01(\x0b2\x0c.hpv.pb.PeerR\tforwarder\x12\x10\n\x03ttl\x18\x04\x20\x01(\
    \x05R\x03ttl\x12\x1a\n\x08priority\x18\x05\x20\x01(\x08R\x08priority\x12\
    \x1a\n\x08accepted\x18\x06\x20\x01(\x08R\x08accepted\x12\x1d\n\nshuffle_\
    id\x18\n\x20\x01(\x05R\tshuffleId\x12(\n\x08exchange\x18\x0b\x20\x03(\
    \x0b2\x0c.hpv.pb.PeerR\x08exchange*}\n\x0bMessageType\x12\x0e\n\nDISCONN\
    ECT\x10\0\x12\x08\n\x04JOIN\x10\x01\x12\x10\n\x0cFORWARD_JOIN\x10\x02\
    \x12\r\n\tNEIGHBOUR\x10\x03\x12\x13\n\x0fNEIGHBOUR_REPLY\x10\x04\x12\x0b\
    \n\x07SHUFFLE\x10\x05\x12\x11\n\rSHUFFLE_REPLY\x10\x06\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
